// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Prova.Tests.ForTestable
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Can provide different ways of supplying a dependency to a class")]
    public partial class CanProvideDifferentWaysOfSupplyingADependencyToAClassFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SingleDependency.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Can provide different ways of supplying a dependency to a class", "In order to be able to use testable objects\nAs a developer\nI want to be able to s" +
                    "upply different types of dependencies", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Implicitly obtain a dependency from the loaded assemblies")]
        public virtual void ImplicitlyObtainADependencyFromTheLoadedAssemblies()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Implicitly obtain a dependency from the loaded assemblies", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have a testable with a type of HasSingleDependency");
#line 8
 testRunner.When("I use the testable object");
#line 9
 testRunner.Then("I should have a dependency with a type of CannedDependency");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Specify an explicit dependency to use")]
        public virtual void SpecifyAnExplicitDependencyToUse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Specify an explicit dependency to use", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have a testable with a type of HasSingleDependency");
#line 13
 testRunner.When("I tell the testable object to use an explicit dependency");
#line 14
 testRunner.And("I use the testable object");
#line 15
 testRunner.Then("I should have an instance that uses that explicit dependency");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Specify a default dependency to use on all testable instances")]
        public virtual void SpecifyADefaultDependencyToUseOnAllTestableInstances()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Specify a default dependency to use on all testable instances", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I want to use a default dependency");
#line 19
 testRunner.And("I have a testable with a type of HasSingleDependency");
#line 20
 testRunner.And("I have another testable with a type of HasSingleDependency");
#line 21
 testRunner.When("I use the testable object");
#line 22
 testRunner.And("I use the other testable object");
#line 23
 testRunner.Then("I should have two instances with different dependencies");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should not be able to provide a dependency that is not used")]
        public virtual void ShouldNotBeAbleToProvideADependencyThatIsNotUsed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should not be able to provide a dependency that is not used", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have a testable with a type of HasSingleDependency");
#line 27
 testRunner.When("I tell the object to use a dependency it does not have");
#line 28
 testRunner.Then("I should have seen an exception with type of ArgumentException");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
